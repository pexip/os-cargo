Description: eliminate any_zlib
 The "any_zlib" feature has no dependencies, but it still seems to cause debcargo
 to split the libz-sys and zlib feature packages.
Author: Peter Michael Green <plugwash@debian.org>

Index: flate2/src/ffi/c.rs
===================================================================
--- flate2.orig/src/ffi/c.rs
+++ flate2/src/ffi/c.rs
@@ -46,13 +46,13 @@ impl Default for StreamWrapper {
                 reserved: 0,
                 opaque: ptr::null_mut(),
                 state: ptr::null_mut(),
-                #[cfg(all(feature = "any_zlib", not(feature = "cloudflare-zlib-sys")))]
+                #[cfg(all(feature = "zlib", not(feature = "cloudflare-zlib-sys")))]
                 zalloc,
-                #[cfg(all(feature = "any_zlib", not(feature = "cloudflare-zlib-sys")))]
+                #[cfg(all(feature = "zlib", not(feature = "cloudflare-zlib-sys")))]
                 zfree,
-                #[cfg(not(all(feature = "any_zlib", not(feature = "cloudflare-zlib-sys"))))]
+                #[cfg(not(all(feature = "zlib", not(feature = "cloudflare-zlib-sys"))))]
                 zalloc: Some(zalloc),
-                #[cfg(not(all(feature = "any_zlib", not(feature = "cloudflare-zlib-sys"))))]
+                #[cfg(not(all(feature = "zlib", not(feature = "cloudflare-zlib-sys"))))]
                 zfree: Some(zfree),
             }),
         }
Index: flate2/src/ffi/mod.rs
===================================================================
--- flate2.orig/src/ffi/mod.rs
+++ flate2/src/ffi/mod.rs
@@ -35,14 +35,14 @@ pub trait DeflateBackend: Backend {
 }
 
 // Default to Rust implementation unless explicitly opted in to a different backend.
-#[cfg(feature = "any_zlib")]
+#[cfg(feature = "zlib")]
 mod c;
-#[cfg(feature = "any_zlib")]
+#[cfg(feature = "zlib")]
 pub use self::c::*;
 
-#[cfg(not(feature = "any_zlib"))]
+#[cfg(not(feature = "zlib"))]
 mod rust;
-#[cfg(not(feature = "any_zlib"))]
+#[cfg(not(feature = "zlib"))]
 pub use self::rust::*;
 
 impl std::fmt::Debug for ErrorMessage {
Index: flate2/src/mem.rs
===================================================================
--- flate2.orig/src/mem.rs
+++ flate2/src/mem.rs
@@ -220,7 +220,7 @@ impl Compress {
     ///
     /// This constructor is only available when the `zlib` feature is used.
     /// Other backends currently do not support custom window bits.
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     pub fn new_with_window_bits(
         level: Compression,
         zlib_header: bool,
@@ -252,7 +252,7 @@ impl Compress {
     ///
     /// This constructor is only available when the `zlib` feature is used.
     /// Other backends currently do not support gzip headers for Compress.
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     pub fn new_gzip(level: Compression, window_bits: u8) -> Compress {
         assert!(
             window_bits > 8 && window_bits < 16,
@@ -278,7 +278,7 @@ impl Compress {
     /// Specifies the compression dictionary to use.
     ///
     /// Returns the Adler-32 checksum of the dictionary.
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     pub fn set_dictionary(&mut self, dictionary: &[u8]) -> Result<u32, CompressError> {
         let stream = &mut *self.inner.inner.stream_wrapper;
         stream.msg = std::ptr::null_mut();
@@ -311,7 +311,7 @@ impl Compress {
     /// the compression of the available input data before changing the
     /// compression level. Flushing the stream before calling this method
     /// ensures that the function will succeed on the first call.
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     pub fn set_level(&mut self, level: Compression) -> Result<(), CompressError> {
         use std::os::raw::c_int;
         let stream = &mut *self.inner.inner.stream_wrapper;
@@ -398,7 +398,7 @@ impl Decompress {
     ///
     /// This constructor is only available when the `zlib` feature is used.
     /// Other backends currently do not support custom window bits.
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     pub fn new_with_window_bits(zlib_header: bool, window_bits: u8) -> Decompress {
         assert!(
             window_bits > 8 && window_bits < 16,
@@ -423,7 +423,7 @@ impl Decompress {
     ///
     /// This constructor is only available when the `zlib` feature is used.
     /// Other backends currently do not support gzip headers for Decompress.
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     pub fn new_gzip(window_bits: u8) -> Decompress {
         assert!(
             window_bits > 8 && window_bits < 16,
@@ -513,7 +513,7 @@ impl Decompress {
     }
 
     /// Specifies the decompression dictionary to use.
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     pub fn set_dictionary(&mut self, dictionary: &[u8]) -> Result<u32, DecompressError> {
         let stream = &mut *self.inner.inner.stream_wrapper;
         stream.msg = std::ptr::null_mut();
@@ -605,7 +605,7 @@ mod tests {
     use crate::write;
     use crate::{Compression, Decompress, FlushDecompress};
 
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     use crate::{Compress, FlushCompress};
 
     #[test]
@@ -666,7 +666,7 @@ mod tests {
         assert!(dst.starts_with(string));
     }
 
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     #[test]
     fn set_dictionary_with_zlib_header() {
         let string = "hello, hello!".as_bytes();
@@ -715,7 +715,7 @@ mod tests {
         assert_eq!(&decoded[..decoder.total_out() as usize], string);
     }
 
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     #[test]
     fn set_dictionary_raw() {
         let string = "hello, hello!".as_bytes();
@@ -746,7 +746,7 @@ mod tests {
         assert_eq!(&decoded[..decoder.total_out() as usize], string);
     }
 
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     #[test]
     fn test_gzip_flate() {
         let string = "hello, hello!".as_bytes();
@@ -772,7 +772,7 @@ mod tests {
         assert_eq!(&decoded[..decoder.total_out() as usize], string);
     }
 
-    #[cfg(feature = "any_zlib")]
+    #[cfg(feature = "zlib")]
     #[test]
     fn test_error_message() {
         let mut decoder = Decompress::new(false);
Index: flate2/Cargo.toml
===================================================================
--- flate2.orig/Cargo.toml
+++ flate2/Cargo.toml
@@ -60,12 +60,10 @@ default-features = false
 version = "0.8"
 
 [features]
-any_zlib = []
 default = ["rust_backend"]
 miniz-sys = ["rust_backend"]
 rust_backend = ["miniz_oxide"]
 zlib = [
-    "any_zlib",
     "libz-sys",
 ]
 
