Already in debcargo-conf.git, can be deleted for next source import.

From c02696949a4fd18810ea7072854818ee92049b9d Mon Sep 17 00:00:00 2001
From: Ximin Luo <infinity0@pwned.gg>
Date: Sat, 23 Oct 2021 23:51:12 +0100
Subject: [PATCH 1/2] Revert "add bindings for `git_branch_name_is_valid`
 (#715)"

This reverts commit 0454efbaa0447a1d02eb11459a7db5e1c27d98e0.
---
 libgit2-sys/lib.rs |  1 -
 src/branch.rs      | 21 +--------------------
 2 files changed, 1 insertion(+), 21 deletions(-)

diff --git a/libgit2-sys/lib.rs b/libgit2-sys/lib.rs
index 7f128cd..044e593 100644
--- a/vendor/libgit2-sys/lib.rs
+++ b/vendor/libgit2-sys/lib.rs
@@ -2820,7 +2820,6 @@ extern "C" {
         force: c_int,
     ) -> c_int;
     pub fn git_branch_name(out: *mut *const c_char, branch: *const git_reference) -> c_int;
-    pub fn git_branch_name_is_valid(valid: *mut c_int, name: *const c_char) -> c_int;
     pub fn git_branch_remote_name(
         out: *mut git_buf,
         repo: *mut git_repository,
diff --git a/src/branch.rs b/src/branch.rs
index e1eba99..57b1591 100644
--- a/vendor/git2/src/branch.rs
+++ b/vendor/git2/src/branch.rs
@@ -28,17 +28,6 @@ impl<'repo> Branch<'repo> {
         Branch { inner: reference }
     }
 
-    /// Ensure the branch name is well-formed.
-    pub fn name_is_valid(name: &str) -> Result<bool, Error> {
-        crate::init();
-        let name = CString::new(name)?;
-        let mut valid: libc::c_int = 0;
-        unsafe {
-            try_call!(raw::git_branch_name_is_valid(&mut valid, name.as_ptr()));
-        }
-        Ok(valid == 1)
-    }
-
     /// Gain access to the reference that is this branch
     pub fn get(&self) -> &Reference<'repo> {
         &self.inner
@@ -162,7 +151,7 @@ impl<'repo> Drop for Branches<'repo> {
 
 #[cfg(test)]
 mod tests {
-    use crate::{Branch, BranchType};
+    use crate::BranchType;
 
     #[test]
     fn smoke() {
@@ -186,12 +175,4 @@ mod tests {
 
         b1.delete().unwrap();
     }
-
-    #[test]
-    fn name_is_valid() {
-        assert!(Branch::name_is_valid("foo").unwrap());
-        assert!(!Branch::name_is_valid("").unwrap());
-        assert!(!Branch::name_is_valid("with spaces").unwrap());
-        assert!(!Branch::name_is_valid("~tilde").unwrap());
-    }
 }
-- 
2.33.0
